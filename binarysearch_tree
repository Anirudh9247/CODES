#include<stdio.h>
#include<stdlib.h>
struct node
{
	struct node *left;
	int data;
	struct node *right;
};
struct node *root=NULL;
struct node * createnode();
void insert(int x);
void delete1(int x);
void preorder(struct node *p);
void inorder(struct node *p);
void postorder(struct node *p);
void search(int x);
int main()
{
	int op,x;
	while(1)
	{
		printf("enter the option 1: insert 2:delete  3:preorder 4:inorder 5:postorder 6:search 7:exit\n");
		scanf("%d",&op);
		switch(op)
		{
			case 1: printf("Enter the value to insert\n");
			        scanf("%d",&x);
			       insert(x);break;
			case 2: printf("Enter the value to delete\n");
			        scanf("%d",&x);
			       delete1(x);break;
			case 3: preorder(root);break;
			case 4: inorder(root);break;
			case 5: postorder(root); break;
			case 6:printf("Enter the value to search\n");
			        scanf("%d",&x);
			        search(x);break;
			case 7: exit(0);break;
			
		}
	}
}
struct node * createnode()
{
	struct node *p;
	p=(struct node *)malloc(sizeof(struct node));
	int x;
	printf("enter the data\n");
	scanf("%d",&x);
	p->left=NULL;
	p->data=x;
	p->right=NULL;
	return(p);
}

void insert(int x)
{
	struct node *p=createnode();
	if(root==NULL)
	root=p;
	else
	{
		struct node *q,*parent;
		q=root;
		while(q!=NULL)
		{
			parent=q;
			if(p->data<=q->data)
			q=q->left;
			else
			q=q->right;			
		}
		if(p->data<=parent->data)
		parent->left=p;
		else
		parent->right=p;
	}
}
void delete1(int x);
void preorder(struct node *p)
{
	if(p!=NULL)
	{
		printf(" %d ",p->data);
		preorder(p->left);
		preorder(p->right);
	}
	
}
void inorder(struct node *p)
{
   if(p!=NULL)
   {
   	inorder(p->left);
   	printf(" %d ",p->data);
   	inorder(p->right);
   }
}
void postorder(struct node *p)
{
   if(p!=NULL)
   {
   	postorder(p->left);   	
   	postorder(p->right);
   	printf(" %d ",p->data);
   }
}

void search(int x);

