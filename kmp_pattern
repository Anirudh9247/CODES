#include <stdio.h>
#include <string.h>

#define MAX_TEXT_LEN 1000
#define MAX_PATTERN_LEN 100

void constructLps(const char *pat, int m, int *lps) {
    int len = 0;  // Length of the previous longest prefix suffix
    lps[0] = 0;   // lps[0] is always 0

    int i = 1;
    while (i < m) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

void search(const char *pat, const char *txt, int *res, int *res_size) {
    int n = strlen(txt);
    int m = strlen(pat);

    int lps[MAX_PATTERN_LEN];
    constructLps(pat, m, lps);

    int i = 0;  // Index for txt
    int j = 0;  // Index for pat
    *res_size = 0;  // Initialize result size

    while (i < n) {
        if (txt[i] == pat[j]) {
            i++;
            j++;

            if (j == m) {
                // Pattern found, store the index
                res[(*res_size)++] = i - j;

                // Update j using the last LPS value
                j = lps[j - 1];
            }
        } else {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }
}

int main() {
    const char txt[] = "aabaacaadaabaaba";
    const char pat[] = "aaba";

    int res[MAX_TEXT_LEN];  // Array to store results
    int res_size = 0;       // Size of the result array

    search(pat, txt, res, &res_size);

    // Print the result
    for (int i = 0; i < res_size; i++) {
        printf("%d ", res[i]);
    }
    printf("\n");

    return 0;
}
